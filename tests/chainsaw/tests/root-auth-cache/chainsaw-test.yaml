apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: root-auth-cache
spec:
  steps:
  - name: Deploy 1-node cluster
    description: Deploy a 1-node cluster for tests
    bindings:
    - name: replicas
      value: 1
    try:
    - apply:
        file: ../../common/galera.yaml
    - assert:
        file: ../../common/galera-assert.yaml

  - name: verify .my.cnf created
    description: Verify that .my.cnf is created after first mysql_root_auth.sh invocation
    try:
    - script:
        content: |
          oc exec -n ${NAMESPACE} -c galera openstack-galera-0 -- /bin/sh -c '
            source /var/lib/operator-scripts/mysql_root_auth.sh
            test -f $HOME/.my.cnf
          '

  - name: verify .my.cnf format
    description: Verify .my.cnf has proper MySQL client format
    try:
    - script:
        content: |
          oc exec -n ${NAMESPACE} -c galera openstack-galera-0 -- /bin/sh -c '
            grep -q "^\[client\]" $HOME/.my.cnf &&
            grep -q "^user=root" $HOME/.my.cnf &&
            grep -q "^password=" $HOME/.my.cnf
          '

  - name: verify .my.cnf permissions
    description: Verify .my.cnf has secure permissions (600)
    try:
    - script:
        content: |
          oc exec -n ${NAMESPACE} -c galera openstack-galera-0 -- /bin/sh -c '
            perms=$(stat -c "%a" $HOME/.my.cnf)
            test "$perms" = "600"
          '

  - name: verify mysql works without explicit credentials
    description: Verify MySQL commands work using .my.cnf without MYSQL_PWD env var
    try:
    - script:
        content: |
          oc exec -n ${NAMESPACE} -c galera openstack-galera-0 -- /bin/sh -c '
            unset MYSQL_PWD
            mysql -e "SELECT 1" > /dev/null
          '

  - name: verify mysqladmin works without explicit credentials
    description: Verify mysqladmin ping works using .my.cnf
    try:
    - script:
        content: |
          oc exec -n ${NAMESPACE} -c galera openstack-galera-0 -- /bin/sh -c '
            unset MYSQL_PWD
            mysqladmin ping > /dev/null
          '

  - name: verify caching works
    description: Verify mysql_root_auth.sh can be sourced multiple times successfully
    try:
    - script:
        content: |
          oc exec -n ${NAMESPACE} -c galera openstack-galera-0 -- /bin/sh -c '
            source /var/lib/operator-scripts/mysql_root_auth.sh
            source /var/lib/operator-scripts/mysql_root_auth.sh
            source /var/lib/operator-scripts/mysql_root_auth.sh
            echo "Sourced 3 times successfully"
          '

  - name: verify env vars still exported
    description: Verify MYSQL_PWD and DB_ROOT_PASSWORD are still exported after sourcing
    try:
    - script:
        content: |
          oc exec -n ${NAMESPACE} -c galera openstack-galera-0 -- /bin/sh -c '
            source /var/lib/operator-scripts/mysql_root_auth.sh
            test -n "$MYSQL_PWD" && test -n "$DB_ROOT_PASSWORD"
            echo "Both env vars are set"
          '

  - name: verify cache refresh on invalid credentials
    description: Verify that invalid credentials in .my.cnf trigger a refresh
    try:
    - script:
        content: |
          oc exec -n ${NAMESPACE} -c galera openstack-galera-0 -- /bin/sh -c '
            # Write invalid credentials to .my.cnf
            echo -e "[client]\nuser=root\npassword=wrongpassword" > $HOME/.my.cnf
            # Source mysql_root_auth.sh - should detect invalid creds and refresh
            source /var/lib/operator-scripts/mysql_root_auth.sh
            # Verify MySQL works now (credentials were refreshed)
            mysql -e "SELECT 1" > /dev/null
            echo "Credentials refreshed successfully"
          '
